name: Multi-Job Sequential Terraform

on:
  push:
    branches: [feature/*]
    paths: ['config_files/**']
  pull_request:
    branches: [main]
    paths: ['config_files/**']

env:
  TF_VERSION: '1.12.2'
  ARM_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
  ARM_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
  ARM_SUBSCRIPTION_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
  ARM_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

jobs:
  plan-all:
    name: Plan All Directories
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      plan-status: ${{ steps.plan-summary.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Plan All Directories
        id: plan-all
        run: |
          DIRECTORIES=("rg_ad" "iam" "df_sa" "rest_storage" "compute")
          PLAN_STATUS="success"
          
          for dir in "${DIRECTORIES[@]}"; do
            echo "=== Planning $dir ==="
            
            if [ -d "config_files/$dir" ]; then
              cd "config_files/$dir"
              
              # Initialize
              if ! terraform init; then
                echo "Init failed for $dir"
                PLAN_STATUS="failed"
                break
              fi
              
              # Validate
              if ! terraform validate; then
                echo "Validation failed for $dir"
                PLAN_STATUS="failed"
                break
              fi
              
              # Plan
              if ! terraform plan -out=tfplan -no-color; then
                echo "Plan failed for $dir"
                PLAN_STATUS="failed"
                break
              fi
              
              cd - > /dev/null
              echo "Plan successful for $dir"
            else
              echo "Directory config_files/$dir not found"
            fi
          done
          
          echo "status=$PLAN_STATUS" >> $GITHUB_OUTPUT
      
      - name: Plan Summary
        id: plan-summary
        run: |
          if [ "${{ steps.plan-all.outputs.status }}" == "success" ]; then
            echo "All terraform plans successful"
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "One or more terraform plans failed"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  apply-sequential:
    name: Apply Sequential
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Apply in Order
        run: |
          # Define directories in dependency order
          DIRECTORIES=("rg_ad" "iam" "df_sa" "rest_storage" "compute")
          
          for dir in "${DIRECTORIES[@]}"; do
            echo "=== Applying $dir ==="
            
            if [ -d "config_files/$dir" ]; then
              cd "config_files/$dir"
              
              # Initialize
              terraform init
              
              # Apply
              if terraform apply -auto-approve; then
                echo "Apply successful for $dir"
              else
                echo "Apply failed for $dir"
                exit 1
              fi
              
              cd - > /dev/null
            else
              echo "Directory config_files/$dir not found, skipping..."
            fi
          done
